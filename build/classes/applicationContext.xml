<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
<!-- 启用注解扫描 -->
<context:annotation-config/>
<!-- 配置和一个testService对象 -->
<bean id ="testService" class="com.chanvee.test.TestService">
<property name="name" value = "test"></property>
</bean>

<!-- 配置数据源 -->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
	    <property name="url" value="jdbc:mysql://localhost:3306/library?useUnicode=true&amp;characterEncoding=UTF-8"/>
	    <property name="username" value="root"/>
	    <property name="password" value=""/>
	     <!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="30"/>
	 	<!-- 连接池的最大值 -->
	 	<property name="maxActive" value="500"/> 
 		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="2"/>
		<!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="1"/>
</bean>

<!-- 配置会话工厂() -->
<bean id="sessionFactory"  class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
     <!-- 设置数据源 -->
     <property name="dataSource" ref="dataSource"/>
     <!-- 接管了hibernate对象映射文件 -->
     <property name="mappingResources">
	    <list>
	      <value>com/chanvee/domain/User.hbm.xml</value>
	      <value>com/chanvee/domain/Book.hbm.xml</value>
	      <value>com/chanvee/domain/Record.hbm.xml</value>
	    </list>
     </property>
     <property name="hibernateProperties">
	    <value>
	        	hibernate.dialect=org.hibernate.dialect.MySQLDialect
	        	hibernate.hbm2ddl.auto=update
				hibernate.show_sql=true
				hibernate.cache.use_second_level_cache=true
        	    hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
        	    hibernate.generate_statistics=true	      
	 </value>
    </property>
</bean>

<!-- 配置UserService对象通过注解的方式来注入属性值,这是一个知识点 -->
<bean id="userService" class="com.chanvee.service.imp.UserService"/>
<bean id="bookService" class="com.chanvee.service.imp.BookService"/>
<bean id="normaluserService" class="com.chanvee.service.imp.normalUserService"/>
<bean id="libadminService" class="com.chanvee.service.imp.libAdminService"/>
<bean id="manageService" class="com.chanvee.service.imp.ManageService"/>

<!-- 配置action -->
<bean name="/login" scope="prototype" class="com.chanvee.web.action.LoginAction"/>
<bean name="/user" scope="prototype" class="com.chanvee.web.action.UserAction">
<property name="userService" ref="userService"/>
<property name="normaluserService" ref="normaluserService"/>
</bean>
<bean name="/book" scope="prototype" class="com.chanvee.web.action.BookAction">
<property name="bookService" ref="bookService"/>
</bean>
<bean name="/manage" scope="prototype" class="com.chanvee.web.action.ManageAction">
<property name="userService" ref="userService"/>
<property name="bookService" ref="bookService"/>
</bean>
<bean name="/normaluser" scope="prototype" class="com.chanvee.web.action.normalUserAction">
<property name="bookService" ref="bookService"/>
<property name="normaluserService" ref="normaluserService"/>
</bean>
<bean name="/libadmin" scope="prototype" class="com.chanvee.web.action.libAdminAction">
<property name="bookService" ref="bookService"/>
<property name="libadminService" ref="libadminService"/>
<property name="normaluserService" ref="normaluserService"/>
</bean>


<!-- 配置事务管理器，统一管理sessionFactory的事务 -->
<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
  	<property name="sessionFactory" ref="sessionFactory"/>
</bean>
<!-- 启用事务注解 -->
<tx:annotation-driven transaction-manager="txManager"/>
</beans>
